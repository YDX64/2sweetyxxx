# ============================================
# GitHub Actions Workflow for 2Sweety
# Automated CI/CD to Coolify Platform
# ============================================

name: Deploy to Coolify

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================
  # Code Quality & Security Checks
  # ============================================
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || echo "Linting skipped - no lint script"
        continue-on-error: true

      - name: Run tests
        run: npm test -- --passWithNoTests --watchAll=false
        continue-on-error: true

      - name: Dependency audit
        run: npm audit --production --audit-level=high
        continue-on-error: true

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # ============================================
  # Build and Test Docker Image
  # ============================================
  build-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: 2sweety-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
            REACT_APP_IMAGE_BASE_URL=${{ secrets.REACT_APP_IMAGE_BASE_URL }}
            REACT_APP_PAYMENT_BASE_URL=${{ secrets.REACT_APP_PAYMENT_BASE_URL }}
            REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}
            REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
            REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
            REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
            REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
            REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}
            REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}
            REACT_APP_ONESIGNAL_APP_ID=${{ secrets.REACT_APP_ONESIGNAL_APP_ID }}
            REACT_APP_AGORA_APP_ID=${{ secrets.REACT_APP_AGORA_APP_ID }}
            REACT_APP_GOOGLE_MAPS_API_KEY=${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}
            REACT_APP_RAZORPAY_KEY_ID=${{ secrets.REACT_APP_RAZORPAY_KEY_ID }}
            REACT_APP_PAYPAL_CLIENT_ID=${{ secrets.REACT_APP_PAYPAL_CLIENT_ID }}
            REACT_APP_STRIPE_PUBLISHABLE_KEY=${{ secrets.REACT_APP_STRIPE_PUBLISHABLE_KEY }}
            REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
            REACT_APP_FACEBOOK_APP_ID=${{ secrets.REACT_APP_FACEBOOK_APP_ID }}

      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 8080:8080 2sweety-web:test
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop test-container

  # ============================================
  # Deploy to Coolify (Production)
  # ============================================
  deploy-production:
    name: Deploy to Coolify Production
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    environment:
      name: production
      url: https://2sweety.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.COOLIFY_WEBHOOK_URL }}
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.COOLIFY_API_TOKEN }}"}'
          timeout: 600000

      - name: Wait for deployment
        run: sleep 60

      - name: Health check after deployment
        run: |
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/health; then
              echo "Deployment successful!"
              exit 0
            fi
            attempt=$((attempt+1))
            echo "Attempt $attempt failed, retrying in 30s..."
            sleep 30
          done
          echo "Deployment health check failed after $max_attempts attempts"
          exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "2Sweety deployed successfully to production! 🚀",
              attachments: [{
                color: 'good',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nBranch: ${{ github.ref_name }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "2Sweety deployment FAILED! ❌",
              attachments: [{
                color: 'danger',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nBranch: ${{ github.ref_name }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # ============================================
  # Post-Deployment Monitoring
  # ============================================
  post-deployment-checks:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Check application response time
        run: |
          response_time=$(curl -o /dev/null -s -w '%{time_total}' ${{ secrets.PRODUCTION_URL }})
          echo "Response time: ${response_time}s"
          if (( $(echo "$response_time > 5" | bc -l) )); then
            echo "Warning: Response time is high (${response_time}s)"
            exit 1
          fi

      - name: Check SSL certificate
        run: |
          echo | openssl s_client -servername 2sweety.app -connect 2sweety.app:443 2>/dev/null | openssl x509 -noout -dates

      - name: Check critical endpoints
        run: |
          endpoints=("/" "/manifest.json" "/firebase-messaging-sw.js")
          for endpoint in "${endpoints[@]}"; do
            echo "Checking ${endpoint}..."
            curl -f ${{ secrets.PRODUCTION_URL }}${endpoint} || exit 1
          done

# ============================================
# Required GitHub Secrets:
# ============================================
# COOLIFY_WEBHOOK_URL - Coolify deployment webhook
# COOLIFY_API_TOKEN - Coolify API token
# PRODUCTION_URL - Production URL (e.g., https://2sweety.app)
# SLACK_WEBHOOK_URL - Optional Slack notifications
# All REACT_APP_* environment variables
# ============================================
